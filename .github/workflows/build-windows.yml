name: Build - Windows (TTF/RTL)

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/**"
      - "data/**"
      - ".github/workflows/build-windows.yml"
  push:
    branches: [ main, master ]
    paths:
      - "src/**"
      - "data/**"
      - ".github/workflows/build-windows.yml"

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        buildtype: [Release]  # add Debug if you want both
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg "%VCPKG_ROOT%"
          "%VCPKG_ROOT%\bootstrap-vcpkg.bat" -disableMetrics

      - name: Cache vcpkg installed
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_DEFAULT_TRIPLET }}-

      - name: Install libraries (freetype/harfbuzz/fribidi)
        run: |
          "%VCPKG_ROOT%\vcpkg.exe" install freetype harfbuzz fribidi --triplet %VCPKG_DEFAULT_TRIPLET%

      - name: Configure (CMake / VS 2022)
        run: |
          cmake -S . -B build ^
            -G "Visual Studio 17 2022" ^
            -DCMAKE_TOOLCHAIN_FILE="%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake" ^
            -DVCPKG_TARGET_TRIPLET=%VCPKG_DEFAULT_TRIPLET% ^
            -DOPTIONS_ENABLE_IPO=ON

      - name: Build (${{ matrix.buildtype }})
        run: cmake --build build --config ${{ matrix.buildtype }} --parallel

      # --- Packaging in MSBuild style: copy EXE + all DLLs near it, plus data/ ---
      - name: Package Executable + DLLs + data
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Find the exe in common VS multi-config locations
          $exePath = Get-ChildItem -Recurse -Path "build" -Filter "otclient*.exe" | Where-Object {
            $_.FullName -match "\\${{ matrix.buildtype }}\\|\\build\\src\\|\\build\\.*" } | Select-Object -First 1
          if (-not $exePath) { throw "otclient.exe not found in build output." }

          $artifactDir = Join-Path $env:GITHUB_WORKSPACE "artifacts\${{ matrix.buildtype }}"
          New-Item -Force -ItemType Directory -Path $artifactDir | Out-Null

          # Copy EXE
          Copy-Item $exePath.FullName -Destination $artifactDir

          # Copy nearby DLLs
          $dlls = Get-ChildItem -Path $exePath.Directory.FullName -Filter "*.dll"
          foreach ($dll in $dlls) { Copy-Item $dll.FullName -Destination $artifactDir }

          # Copy data folder (UI, fonts, etc.)
          Copy-Item -Recurse -Force "data" (Join-Path $artifactDir "data")

          # Zip it up
          $zip = Join-Path $env:GITHUB_WORKSPACE "otclient-windows-${{ matrix.buildtype }}.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$artifactDir\*" -DestinationPath $zip
          Write-Host "Created: $zip"

      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: otclient-windows-${{ matrix.buildtype }}
          path: |
            ${{ github.workspace }}/otclient-windows-${{ matrix.buildtype }}.zip
          if-no-files-found: error
