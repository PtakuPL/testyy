name: build-windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows
      VCPKG_FEATURE_FLAGS: manifests,binarycaching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false   # nie oczekujemy submodułu vcpkg/

      - name: MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install CMake + Ninja
        uses: lukka/get-cmake@latest

      # Kluczowy krok: NIE podajemy vcpkgDirectory (nie masz submodułu).
      # Pinujemy pełny 40-znakowy commit i wskazujemy JEDEN manifest.
      - name: Setup vcpkg (pin + manifest)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitURL: https://github.com/microsoft/vcpkg.git
          # Użyj spójnego, nowszego commita vcpkg (40 hex). Jeżeli w repo
          # zmienisz builtin-baseline na inny, zaktualizuj tu to samo.
          vcpkgGitCommitId: b322346fe03b0d04283f9daf05fecc0c8f64d6f
          runVcpkgInstall: true
          # Bardzo ważne: wskaż dokładnie jeden manifest
          vcpkgJsonGlob: 'vcpkg.json'
          # Jeśli masz inne vcpkg.json w podkatalogach – ignorujemy je:
          vcpkgJsonIgnores: "['**/vcpkg/**']"
          # Zostawiam Twoje parametry uruchomienia:
          runVcpkgFormatString: "[`install`, `--recurse`, `--clean-after-build`, `--x-install-root`, `$[env.VCPKG_INSTALLED_DIR]`, `--triplet`, `$[env.VCPKG_DEFAULT_TRIPLET]`]"
          # Zgodnie z logiem: bez cache samego vcpkg (binaria portów i tak cache’uje vcpkg)
          doNotCache: true
          doNotUpdateVcpkg: false
          useShell: true
          # Zbieranie logów jak w Twoim runie:
          logCollectionRegExps: '\s*"(.+CMakeOutput\.log)"\.\s*;\s*"(.+CMakeError\.log)"\.\s*;\s*(.+out\.log)\s*;\s+(.+err\.log)\s*;\s*(.+vcpkg.+\.log)\s*'

      - name: Configure (CMake / VS2022 x64)
        shell: pwsh
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET"
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build (Release)
        shell: pwsh
        run: cmake --build build --config Release --parallel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: windows-release-${{ github.run_number }}
          path: |
            build/**/Release/*.exe
            build/**/*.dll
            build/*.pdb
          if-no-files-found: warn

      - name: Upload CMake logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-windows
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
          if-no-files-found: warn
