name: build-windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows
      VCPKG_FEATURE_FLAGS: manifests,binarycaching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Setup vcpkg (use repo's vcpkg folder)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitURL: https://github.com/microsoft/vcpkg.git
          # Use the vcpkg directory inside the repo if present
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          # IMPORTANT: real 40-hex SHA (avoid earlier 'baseline' mistake)
          vcpkgGitCommitId: fa38f70294672e88692567ff92dbb17e45d1a334
          # Let the action run 'vcpkg install' from the manifest
          runVcpkgInstall: true
          vcpkgJsonGlob: "**/vcpkg.json"
          vcpkgConfigurationJsonGlob: "**/vcpkg-configuration.json"
          # Avoid bloating cache while debugging
          doNotCache: true

      - name: Fallback install pkgconf (classic)
        shell: pwsh
        run: |
          # In manifest mode `vcpkg install pkgconf` errors. Run from VCPKG_ROOT with --classic.
          Push-Location "$env:VCPKG_ROOT"
          try {
            .\vcpkg.exe install pkgconf --triplet $env:VCPKG_DEFAULT_HOST_TRIPLET --classic
          } catch {
            Write-Host "Ignoring pkgconf classic failure (may already be installed)."
          }
          Pop-Location

      - name: Ensure/locate pkgconf (handles host/target + classic fallback)
        shell: pwsh
        run: |
          function Find-Pkgconf([string]$HostTriplet,[string]$TargetTriplet){
            $candidates = @(
              (Join-Path $env:VCPKG_ROOT "installed\$HostTriplet\tools\pkgconf\pkgconf.exe"),
              (Join-Path $env:VCPKG_ROOT "installed\$TargetTriplet\tools\pkgconf\pkgconf.exe")
            )
            foreach($p in $candidates){ if(Test-Path $p){ return $p } }
            return $null
          }
          $hostTriplet = "${env:VCPKG_DEFAULT_HOST_TRIPLET}"
          if([string]::IsNullOrEmpty($hostTriplet)){ $hostTriplet = "x64-windows" }
          $targetTriplet = "${env:VCPKG_DEFAULT_TRIPLET}"
          if([string]::IsNullOrEmpty($targetTriplet)){ $targetTriplet = "x64-windows-static" }

          $exe = Find-Pkgconf -HostTriplet $hostTriplet -TargetTriplet $targetTriplet
          if(-not $exe){
            Write-Error "pkgconf.exe not found in installed\$hostTriplet or installed\$targetTriplet"
          } else {
            $dir = Split-Path $exe
            echo "$dir" >> $env:GITHUB_PATH
            echo "PKG_CONFIG_EXECUTABLE=$exe" >> $env:GITHUB_ENV
            Write-Host "Using pkgconf at $exe"
          }

      - name: Configure (VS2022 x64)
        shell: pwsh
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET" `
            -DCMAKE_BUILD_TYPE=Release

      - name: Build (Release)
        shell: pwsh
        run: cmake --build build --config Release --parallel

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: otclient-windows
          path: |
            build\bin\Release\*.exe
            build\*.pdb
            build\*.dll
          if-no-files-found: warn

      - name: Upload CMake logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-windows
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
