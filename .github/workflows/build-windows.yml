name: build-windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - "**/*.md"
  pull_request:

concurrency:
  group: windows-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest

    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows
      VCPKG_FEATURE_FLAGS: manifests,binarycaching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false   # nie zakładamy submodułu vcpkg/

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install CMake + Ninja
        uses: lukka/get-cmake@latest

      # ---- VCPKG: czysty klon do $GITHUB_WORKSPACE\vcpkg + bootstrap ----
      - name: Set VCPKG_ROOT under workspace
        shell: pwsh
        run: |
          $root = Join-Path $env:GITHUB_WORKSPACE 'vcpkg'
          echo "VCPKG_ROOT=$root" >> $env:GITHUB_ENV
          Write-Host "Using VCPKG_ROOT = $root"

      - name: Fresh clone vcpkg + bootstrap
        shell: pwsh
        run: |
          if (Test-Path "$env:VCPKG_ROOT") {
            Write-Host "Cleaning $env:VCPKG_ROOT"
            Remove-Item -Recurse -Force "$env:VCPKG_ROOT"
          }
          git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
          git -C "$env:VCPKG_ROOT" fetch --force --tags --prune origin
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          & "$env:VCPKG_ROOT\vcpkg.exe" version

      - name: Cache vcpkg artifacts (installed + downloads)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed
            ${{ env.VCPKG_ROOT }}\downloads
          key: vcpkg-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-configuration.json','**/CMakeLists.txt') }}
          restore-keys: |
            vcpkg-${{ env.VCPKG_DEFAULT_TRIPLET }}-

      - name: vcpkg install (manifest mode)
        shell: pwsh
        run: |
          # Zainstaluje wszystkie zależności z vcpkg.json (w tym host tools)
          & "$env:VCPKG_ROOT\vcpkg.exe" install

      # (opcjonalny, ale pomaga przy HarfBuzz/Fribidi) — ustala PKG_CONFIG_EXECUTABLE
      - name: Ensure/locate pkgconf
        shell: pwsh
        run: |
          function Find-Pkgconf {
            param([string]$HostTriplet, [string]$TargetTriplet)
            $candidates = @(
              (Join-Path $env:VCPKG_ROOT "installed\$HostTriplet\tools\pkgconf\pkgconf.exe"),
              (Join-Path $env:VCPKG_ROOT "installed\$TargetTriplet\tools\pkgconf\pkgconf.exe")
            )
            foreach ($p in $candidates) { if (Test-Path $p) { return $p } }
            return $null
          }

          $hostTrip = "${{ env.VCPKG_DEFAULT_HOST_TRIPLET }}"
          $targetTrip = "${{ env.VCPKG_DEFAULT_TRIPLET }}"
          $exe = Find-Pkgconf -HostTriplet $hostTrip -TargetTriplet $targetTrip
          if (-not $exe) {
            Write-Host "pkgconf not found. Installing classic for host triplet $hostTrip..."
            & "$env:VCPKG_ROOT\vcpkg.exe" install pkgconf --triplet $hostTrip --classic
            $exe = Find-Pkgconf -HostTriplet $hostTrip -TargetTriplet $targetTrip
          }
          if (-not $exe) {
            throw "pkgconf.exe not found in installed\$hostTrip or installed\$targetTrip"
          } else {
            $dir = Split-Path $exe
            echo "$dir" >> $env:GITHUB_PATH
            echo "PKG_CONFIG_EXECUTABLE=$exe" >> $env:GITHUB_ENV
            Write-Host "Using pkgconf at $exe"
          }

      - name: Configure (CMake - VS 2022 generator)
        shell: pwsh
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_VERBOSE_MAKEFILE=ON
          -DOTC_ENABLE_TTF=ON -DOTC_ENABLE_HARFBUZZ=ON -DOTC_ENABLE_FRIBIDI=ON
          -DPKG_CONFIG_EXECUTABLE="$env:PKG_CONFIG_EXECUTABLE"

      - name: Build (Release)
        shell: pwsh
        run: cmake --build build --config Release --parallel

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: otclient-windows-x64
          path: |
            build/**/Release/*.exe
            build/**/client.exe
            build/bin/**
            build/*.pdb
          if-no-files-found: warn

      - name: Upload CMake logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-windows
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
          if-no-files-found: warn
