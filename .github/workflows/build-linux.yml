name: build-windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: windows-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest

    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows
      VCPKG_FEATURE_FLAGS: manifests,binarycaching
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Wyciągamy 40-znakowy SHA z builtin-baseline (jeśli brak/niepełny -> bezpieczny fallback)
      - name: Resolve vcpkg commit (from builtin-baseline or fallback)
        id: vcpkg-commit
        shell: pwsh
        run: |
          $fallback = '5b1214315250939257ef5d62ecdcbca18cf4fb1c' # zalecany, zgodny z run-vcpkg@v11
          $commit = ''
          if (Test-Path "$env:GITHUB_WORKSPACE\vcpkg.json") {
            try {
              $json = Get-Content "$env:GITHUB_WORKSPACE\vcpkg.json" -Raw | ConvertFrom-Json
              $commit = $json.'builtin-baseline'
            } catch { $commit = '' }
          }
          if ($commit -match '^[0-9a-f]{40}$') {
            "vcpkgGitCommitId=$commit" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "Using builtin-baseline as vcpkgGitCommitId: $commit"
          } else {
            "vcpkgGitCommitId=$fallback" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "No valid builtin-baseline found; using fallback: $fallback"
          }

      - name: Setup vcpkg (manifest install + GH cache)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitURL: https://github.com/microsoft/vcpkg.git
          vcpkgGitCommitId: ${{ steps.vcpkg-commit.outputs.vcpkgGitCommitId }}
          # NIE ustawiamy vcpkgDirectory — nie wymagamy submodułu, unikamy 'pathspec .../vcpkg'
          runVcpkgInstall: true
          vcpkgJsonGlob: "**/vcpkg.json"
          vcpkgConfigurationJsonGlob: "**/vcpkg-configuration.json"
          doNotCache: false

      # Fallback dla pkgconf (często potrzebny przez find_package via pkg-config)
      - name: Ensure pkgconf (host/target)
        shell: pwsh
        run: |
          function Find-Pkgconf {
            param([string]$HostTriplet, [string]$TargetTriplet)
            $candidates = @(
              (Join-Path $env:VCPKG_ROOT "installed\$HostTriplet\tools\pkgconf\pkgconf.exe"),
              (Join-Path $env:VCPKG_ROOT "installed\$TargetTriplet\tools\pkgconf\pkgconf.exe")
            )
            foreach ($p in $candidates) { if (Test-Path $p) { return $p } }
            return $null
          }
          $host = "${env:VCPKG_DEFAULT_HOST_TRIPLET}"
          $tgt  = "${env:VCPKG_DEFAULT_TRIPLET}"
          $exe = Find-Pkgconf -HostTriplet $host -TargetTriplet $tgt
          if (-not $exe) {
            Push-Location "$env:VCPKG_ROOT"
            try { .\vcpkg.exe install pkgconf --triplet $host --classic } catch { Write-Host "pkgconf classic install skipped." }
            Pop-Location
            $exe = Find-Pkgconf -HostTriplet $host -TargetTriplet $tgt
          }
          if (-not $exe) { throw "pkgconf.exe not found in installed\$host or installed\$tgt" }
          $dir = Split-Path $exe
          echo "$dir" >> $env:GITHUB_PATH
          echo "PKG_CONFIG_EXECUTABLE=$exe" >> $env:GITHUB_ENV
          Write-Host "Using pkgconf at $exe"

      - name: Configure (CMake, VS2022 x64)
        shell: pwsh
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET"
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_VERBOSE_MAKEFILE=ON
          -DOTC_ENABLE_TTF=ON -DOTC_ENABLE_HARFBUZZ=ON -DOTC_ENABLE_FRIBIDI=ON
          -DPKG_CONFIG_EXECUTABLE="$env:PKG_CONFIG_EXECUTABLE"

      - name: Build (Release)
        shell: pwsh
        run: cmake --build build --config Release --parallel

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: otclient-windows-x64
          path: |
            build/**/Release/*.exe
            build/**/client.exe
            build/**/*.dll
            build/*.pdb
          if-no-files-found: warn

      - name: Upload CMake logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-windows
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
          if-no-files-found: warn
